var documenterSearchIndex = {"docs":
[{"location":"#The-Common-Interface-for-the-QUEST-ecosystem","page":"Home","title":"The Common Interface for the QUEST ecosystem","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The QUEST common interface ties together the utilities of the ecosystem into a single unified interface. It is designed ensure compatiabilty between the different available packages.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This documentation is made to pool together the docs of the various Quest libraries to paint the overarching picture and document the shared/common functionality.","category":"page"},{"location":"#Packages-of-Quest-Ecosystem","page":"Home","title":"Packages of Quest Ecosystem","text":"","category":"section"},{"location":"#[HarmonicBalance.jl](https://github.com/QuantumEngineeredSystems/HarmonicBalance.jl):","page":"Home","title":"HarmonicBalance.jl:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A package for applying the harmonic balance method to classical driven nonlinear resonators. It computes the stroboscopic effective equations of motion of the system at the characteristic response frequencies of the system. Both Krylov-Bogoliubov averaging method to higher orders and the harmonic balance method are implemented.","category":"page"},{"location":"#[HarmonicSteadyState.jl](https://github.com/QuantumEngineeredSystems/HarmonicSteadyState.jl)","page":"Home","title":"HarmonicSteadyState.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A package for computing the classical steady state of the effective stroboscopic systems driven nonlinear resonators. Given one has the autonomous equations of motion of the system in the rotating frame of the characteristic response frequencies, it collect steady states methods to find and describe the stationary responses of the system. It supports the following methods:","category":"page"},{"location":"","page":"Home","title":"Home","text":"fixed point steady states with Homotopy Continuation\nFinding Limit-cycle  with Homotopy Continuation\nStability analysis\nLinear response of the steady state in the (non-)rotating frame\nParameter sweeps\nPlotting utilities","category":"page"},{"location":"API/","page":"API","title":"API","text":"CollapsedDocStrings = true","category":"page"},{"location":"API/#API","page":"API","title":"API","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Pages = [\"API.md\"]\nDepth = 2:3","category":"page"},{"location":"API/#Classical-harmonic-systems","page":"API","title":"Classical harmonic systems","text":"","category":"section"},{"location":"API/#Classical-equations-of-motion-in-lab-frame","page":"API","title":"Classical equations of motion in lab frame","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"QuestBase.DifferentialEquation\nQuestBase.rearrange_standard!(::QuestBase.DifferentialEquation)\nQuestBase.rearrange!\nQuestBase.is_rearranged_standard\nQuestBase.get_equations\nQuestBase.get_independent_variables(::QuestBase.DifferentialEquation)\nQuestBase.get_variables(::QuestBase.DifferentialEquation)","category":"page"},{"location":"API/#QuestBase.DifferentialEquation","page":"API","title":"QuestBase.DifferentialEquation","text":"mutable struct DifferentialEquation\n\nHolds differential equation(s) of motion and a set of harmonics to expand each variable. This is the primary input for HarmonicBalance.jl. After inputting the equations, the harmonics ansatz needs to be specified using add_harmonic!.\n\nFields\n\nequations::OrderedCollections.OrderedDict{Symbolics.Num, Symbolics.Equation}: Assigns to each variable an equation of motion.\nharmonics::OrderedCollections.OrderedDict{Symbolics.Num, OrderedCollections.OrderedSet{Symbolics.Num}}: Assigns to each variable a set of harmonics.\n\nExample\n\njulia> @variables t, x(t), y(t), ω0, ω, F, k;\n\n# equivalent ways to enter the simple harmonic oscillator\njulia> DifferentialEquation(d(x,t,2) + ω0^2 * x - F * cos(ω*t), x);\njulia> DifferentialEquation(d(x,t,2) + ω0^2 * x ~ F * cos(ω*t), x);\n\n# two coupled oscillators, one of them driven\njulia> DifferentialEquation(\n    [d(x,t,2) + ω0^2 * x - k*y, d(y,t,2) + ω0^2 * y - k*x] .~ [F * cos(ω*t), 0], [x,y]\n);\n\n\n\n\n\n","category":"type"},{"location":"API/#QuestBase.rearrange_standard!-Tuple{QuestBase.DifferentialEquation}","page":"API","title":"QuestBase.rearrange_standard!","text":"rearrange_standard!(eom::QuestBase.DifferentialEquation)\nrearrange_standard!(\n    eom::QuestBase.DifferentialEquation,\n    degree\n)\n\n\nRearranges the differential equations in eom to standard form, where the highest derivative of each variable (specified by degree, default 2) appears isolated on the left-hand side. Modifies the equations in place.\n\n\n\n\n\n","category":"method"},{"location":"API/#QuestBase.rearrange!","page":"API","title":"QuestBase.rearrange!","text":"rearrange!(\n    eom::QuestBase.DifferentialEquation,\n    new_lhs::Vector{Symbolics.Num}\n)\n\n\nRearranges the equations in eom such that the expressions in new_lhs appear isolated on the left-hand sides. Uses symbolic linear solving to determine the right-hand sides. Modifies the equations in place.\n\n\n\n\n\nRearrange an equation system such that the field equations is equal to the vector specified in new_lhs\n\n\n\n\n\n","category":"function"},{"location":"API/#QuestBase.is_rearranged_standard","page":"API","title":"QuestBase.is_rearranged_standard","text":"is_rearranged_standard(\n    eom::QuestBase.DifferentialEquation\n) -> Any\nis_rearranged_standard(\n    eom::QuestBase.DifferentialEquation,\n    degree\n) -> Any\n\n\nChecks if the differential equations in eom are arranged in standard form, where the highest derivative of each variable appears isolated on the left-hand side. The default degree is 2, corresponding to second-order differential equations.\n\n\n\n\n\n","category":"function"},{"location":"API/#QuestBase.get_equations","page":"API","title":"QuestBase.get_equations","text":"get_equations(\n    eom::QuestBase.DifferentialEquation\n) -> Vector{Symbolics.Equation}\n\n\nReturn the equations of eom.\n\n\n\n\n\n","category":"function"},{"location":"API/#QuestBase.get_independent_variables-Tuple{QuestBase.DifferentialEquation}","page":"API","title":"QuestBase.get_independent_variables","text":"get_independent_variables(\n    diff_eom::QuestBase.DifferentialEquation\n) -> Any\n\n\nReturn the independent dependent variables of diff_eom.\n\n\n\n\n\n","category":"method"},{"location":"API/#Symbolics.get_variables-Tuple{QuestBase.DifferentialEquation}","page":"API","title":"Symbolics.get_variables","text":"get_variables(\n    diff_eom::QuestBase.DifferentialEquation\n) -> Vector{Symbolics.Num}\n\n\nReturn the dependent variables of diff_eom.\n\n\n\n\n\n","category":"method"},{"location":"API/#Harmonics","page":"API","title":"Harmonics","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"QuestBase.HarmonicVariable\nQuestBase.add_harmonic!","category":"page"},{"location":"API/#QuestBase.HarmonicVariable","page":"API","title":"QuestBase.HarmonicVariable","text":"mutable struct HarmonicVariable\n\nHolds a variable stored under symbol describing the harmonic ω of natural_variable.\n\nFields\n\nsymbol::Symbolics.Num: Symbol of the variable in the HarmonicBalance namespace.\nname::String: Human-readable labels of the variable, used for plotting.\ntype::String: Type of the variable (u or v for quadratures, a for a constant, Hopf for Hopf etc.)\nω::Symbolics.Num: The harmonic being described.\nnatural_variable::Symbolics.Num: The natural variable whose harmonic is being described.\n\n\n\n\n\n","category":"type"},{"location":"API/#QuestBase.add_harmonic!","page":"API","title":"QuestBase.add_harmonic!","text":"add_harmonic!(\n    diff_eom::QuestBase.DifferentialEquation,\n    var::Symbolics.Num,\n    ω\n)\n\n\nAdd the harmonic ω to the harmonic ansatz used to expand the variable var in diff_eom.\n\nExample\n\ndefine the simple harmonic oscillator and specify that x(t) oscillates with frequency ω\n\njulia> @variables t, x(t), y(t), ω0, ω, F, k;\njulia> diff_eq = DifferentialEquation(d(x,t,2) + ω0^2 * x ~ F * cos(ω*t), x);\njulia> add_harmonic!(diff_eq, x, ω) # expand x using ω\n\nSystem of 1 differential equations\nVariables:       x(t)\nHarmonic ansatz: x(t) => ω;\n\n(ω0^2)*x(t) + Differential(t)(Differential(t)(x(t))) ~ F*cos(t*ω)\n\n\n\n\n\n","category":"function"},{"location":"API/#Effective-stroboscopic-equations-of-motion-in-a-rotating-frame","page":"API","title":"Effective stroboscopic equations of motion in a rotating frame","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"QuestBase.HarmonicEquation\nQuestBase.get_independent_variables(::QuestBase.HarmonicEquation)\nQuestBase.get_variables(::QuestBase.HarmonicEquation)\nQuestBase.rearrange_standard(::QuestBase.HarmonicEquation)\nQuestBase.rearrange_standard!(::QuestBase.HarmonicEquation)\nQuestBase.rearrange\nQuestBase.is_rearranged","category":"page"},{"location":"API/#QuestBase.HarmonicEquation","page":"API","title":"QuestBase.HarmonicEquation","text":"mutable struct HarmonicEquation\n\nHolds a set of algebraic equations governing the harmonics of a DifferentialEquation.\n\nFields\n\nequations::Vector{Symbolics.Equation}: A set of equations governing the harmonics.\nvariables::Vector{QuestBase.HarmonicVariable}: A set of variables describing the harmonics.\nparameters::Vector{Symbolics.Num}: The parameters of the equation set.\nnatural_equation::QuestBase.DifferentialEquation: The natural equation (before the harmonic ansatz was used).\njacobian::Matrix{Symbolics.Num}: The Jacobian of the natural equation.\n\n\n\n\n\n","category":"type"},{"location":"API/#QuestBase.get_independent_variables-Tuple{QuestBase.HarmonicEquation}","page":"API","title":"QuestBase.get_independent_variables","text":"get_independent_variables(\n    eom::QuestBase.HarmonicEquation\n) -> Vector{Symbolics.Num}\n\n\nReturn the independent variables (typically time) of eom.\n\n\n\n\n\n","category":"method"},{"location":"API/#Symbolics.get_variables-Tuple{QuestBase.HarmonicEquation}","page":"API","title":"Symbolics.get_variables","text":"get_variables(\n    eom::QuestBase.HarmonicEquation\n) -> Vector{Symbolics.Num}\n\n\nGet the internal symbols of the independent variables of eom.\n\n\n\n\n\n","category":"method"},{"location":"API/#QuestBase.rearrange_standard-Tuple{QuestBase.HarmonicEquation}","page":"API","title":"QuestBase.rearrange_standard","text":"rearrange_standard(\n    eom::QuestBase.HarmonicEquation\n) -> QuestBase.HarmonicEquation\n\n\nRearrange eom to the standard form, such that the derivatives of the variables are on one side.\n\n\n\n\n\n","category":"method"},{"location":"API/#QuestBase.rearrange_standard!-Tuple{QuestBase.HarmonicEquation}","page":"API","title":"QuestBase.rearrange_standard!","text":"rearrange_standard!(\n    eom::QuestBase.HarmonicEquation\n) -> QuestBase.HarmonicEquation\n\n\nRearrange eom to the standard form, such that the derivatives of the variables are on one side.\n\n\n\n\n\n","category":"method"},{"location":"API/#QuestBase.rearrange","page":"API","title":"QuestBase.rearrange","text":"rearrange(\n    eom::QuestBase.DifferentialEquation,\n    new_lhs::Vector{Symbolics.Num}\n) -> QuestBase.DifferentialEquation\n\n\nCreates a new differential equation system by rearranging the equations in eom such that the expressions in new_lhs appear isolated on the left-hand sides. Similar to rearrange! but returns a new system instead of modifying in place.\n\n\n\n\n\nRearrange an equation system such that the field equations is equal to the vector specified in new_lhs\n\n\n\n\n\n","category":"function"},{"location":"API/#QuestBase.is_rearranged","page":"API","title":"QuestBase.is_rearranged","text":"is_rearranged(\n    eom::QuestBase.HarmonicEquation\n) -> Union{Missing, Bool}\n\n\nCheck if eom is rearranged to the standard form, such that the derivatives of the variables are on one side.\n\n\n\n\n\n","category":"function"},{"location":"API/#Steady-state-methods","page":"API","title":"Steady state methods","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"QuestBase.HarmonicBalanceMethod","category":"page"},{"location":"API/#QuestBase.HarmonicBalanceMethod","page":"API","title":"QuestBase.HarmonicBalanceMethod","text":"HarmonicBalanceMethod\n\nAbstract type for harmonic balance methods.\n\n\n\n\n\n","category":"type"},{"location":"API/#Symbolic-Utilities","page":"API","title":"Symbolic Utilities","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"QuestBase contains a number of symbolic utilities to help with the symbolic manipulation of the equations of motion. These are function on the top of the Symbolics.jl package and are considered non-public.","category":"page"},{"location":"API/","page":"API","title":"API","text":"QuestBase.d","category":"page"},{"location":"API/#QuestBase.d","page":"API","title":"QuestBase.d","text":"The derivative of f w.r.t. x of degree deg\n\n\n\n\n\n","category":"function"},{"location":"API/#Exponentials","page":"API","title":"Exponentials","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"QuestBase.simplify_exp_products\nQuestBase.expand_exp_power","category":"page"},{"location":"API/#QuestBase.simplify_exp_products","page":"API","title":"QuestBase.simplify_exp_products","text":"Simplify products of exponentials such that exp(a)*exp(b) => exp(a+b) This is included in SymbolicUtils as of 17.0 but the method here avoid other simplify calls\n\n\n\n\n\n","category":"function"},{"location":"API/#QuestBase.expand_exp_power","page":"API","title":"QuestBase.expand_exp_power","text":"Expand powers of exponential such that exp(x)^n => exp(x*n) \n\n\n\n\n\n","category":"function"},{"location":"API/#Trigonometrics","page":"API","title":"Trigonometrics","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"QuestBase.trig_reduce\nQuestBase.is_trig\nQuestBase.exp_to_trig\nQuestBase.trig_to_exp","category":"page"},{"location":"API/#QuestBase.trig_reduce","page":"API","title":"QuestBase.trig_reduce","text":"is_trig(f::Num)\n\nCheck if the given expression f is a trigonometric function (sine or cosine).\n\nReturns true if f is either sin or cos, false otherwise.\n\n\n\n\n\n","category":"function"},{"location":"API/#QuestBase.is_trig","page":"API","title":"QuestBase.is_trig","text":"Return true if f is a sin or cos.\n\n\n\n\n\n","category":"function"},{"location":"API/#QuestBase.exp_to_trig","page":"API","title":"QuestBase.exp_to_trig","text":"exp_to_trig(x::BasicSymbolic)\nexp_to_trig(x)\nexp_to_trig(x::Num)\nexp_to_trig(x::Complex{Num})\n\nConvert exponential expressions to their trigonometric form using the inverse of Euler's formula: cos(x) = (exp(ix) + exp(-ix))2 and sin(x) = (exp(ix) - exp(-ix))(2i).\n\nHandles various input types including basic symbolic expressions, complex numbers, and Num types. Standardizes the sign of trigonometric arguments for consistent simplification.\n\n\n\n\n\n","category":"function"},{"location":"API/#QuestBase.trig_to_exp","page":"API","title":"QuestBase.trig_to_exp","text":"trig_to_exp(x::Num)\n\nConvert all trigonometric terms (sin, cos) in expression x to their exponential form using Euler's formula: exp(ix) = cos(x) + i*sin(x).\n\nReturns the converted expression as a Num type.\n\n\n\n\n\n","category":"function"}]
}
